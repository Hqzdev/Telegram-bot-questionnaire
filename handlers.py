import uuid
import logging
from datetime import datetime
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import Config
from states import SurveyStates
from utils import UTMProcessor, GoogleSheetsManager, DataFormatter, logger

router = Router()
sheets_manager = GoogleSheetsManager()

class SurveyHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ FSM-–∞–Ω–∫–µ—Ç—ã"""
    
    def __init__(self):
        self.survey_config = Config.load_survey()
        self.step_mapping = {
            'name': SurveyStates.name,
            'age': SurveyStates.age,
            'city': SurveyStates.city,
            'interests': SurveyStates.interests,
            'budget': SurveyStates.budget,
            'contact': SurveyStates.contact,
            'phone': SurveyStates.phone
        }
    
    def get_step_keyboard(self, step_config: Dict[str, Any]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        if step_config['type'] != 'buttons':
            return None
            
        keyboard = []
        for option in step_config['options']:
            keyboard.append([InlineKeyboardButton(text=option, callback_data=f"answer:{step_config['id']}:{option}")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def start_survey(self, message: Message, state: FSMContext, utm_data: Dict[str, str] = None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∫–µ—Ç—É"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            lead_id=str(uuid.uuid4()),
            user_id=message.from_user.id,
            username=message.from_user.username,
            tg_start=datetime.now().isoformat(),
            utm_data=utm_data or {},
            answers={}
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
        first_step = self.survey_config['steps'][0]
        await state.set_state(self.step_mapping[first_step['id']])
        
        keyboard = self.get_step_keyboard(first_step)
        await message.answer(first_step['question'], reply_markup=keyboard)
    
    async def handle_text_answer(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        current_state = await state.get_state()
        step_id = current_state.split(':')[-1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        data = await state.get_data()
        if 'answers' not in data:
            data['answers'] = {}
        data['answers'][step_id] = message.text
        await state.set_data(data)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await self.next_step(message, state)
    
    async def handle_button_answer(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        _, step_id, answer = callback.data.split(':', 2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        data = await state.get_data()
        if 'answers' not in data:
            data['answers'] = {}
        data['answers'][step_id] = answer
        await state.set_data(data)
        
        await callback.answer()
        await self.next_step(callback.message, state)
    
    async def next_step(self, message: Message, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∞–Ω–∫–µ—Ç—ã"""
        data = await state.get_data()
        current_answers = data.get('answers', {})
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        next_step = None
        for step in self.survey_config['steps']:
            if step['id'] not in current_answers:
                next_step = step
                break
        
        if next_step:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            await state.set_state(self.step_mapping[next_step['id']])
            keyboard = self.get_step_keyboard(next_step)
            await message.answer(next_step['question'], reply_markup=keyboard)
        else:
            # –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await self.complete_survey(message, state)
    
    async def complete_survey(self, message: Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        required_keys = ['lead_id', 'user_id', 'username', 'answers', 'utm_data', 'tg_start']
        missing_keys = [key for key in required_keys if key not in data]
        
        if missing_keys:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {missing_keys}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        data['tg_complete'] = datetime.now().isoformat()
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã: {data}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
        try:
            row_data = DataFormatter.format_lead_data(
                lead_id=data['lead_id'],
                user_id=data['user_id'],
                username=data['username'],
                answers=data['answers'],
                utm_data=data['utm_data'],
                tg_start=data['tg_start'],
                tg_complete=data['tg_complete']
            )
            logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Google Sheets: {row_data}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        sheets_success = False
        if sheets_manager.enabled:
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets...")
            sheets_success = await sheets_manager.append_row(row_data)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {sheets_success}")
        else:
            logger.info("Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
        notification_text = f"""
üéâ –ù–æ–≤—ã–π –ª–∏–¥ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É!

üìã Lead ID: {data['lead_id']}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{data['username']} (ID: {data['user_id']})
üìÖ –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {data['tg_complete']}
üíæ Google Sheets: {'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if sheets_success else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üìä –û—Ç–≤–µ—Ç—ã:
"""
        for step in self.survey_config['steps']:
            answer = data['answers'].get(step['id'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            notification_text += f"‚Ä¢ {step['question']}: {answer}\n"
        
        if data['utm_data']:
            notification_text += "\nüè∑ UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            for key, value in data['utm_data'].items():
                notification_text += f"‚Ä¢ {key}: {value}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
        try:
            await message.bot.send_message(Config.PRIVATE_CHAT_ID, notification_text)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç {Config.PRIVATE_CHAT_ID}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if sheets_success:
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            logger.info(f"–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        else:
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            logger.info(f"–ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–Ω–∫–µ—Ç—ã
survey_handler = SurveyHandler()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    # –ü–∞—Ä—Å–∏–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ start payload
    utm_data = UTMProcessor.parse_start_payload(message.text.split()[1] if len(message.text.split()) > 1 else None)
    
    if utm_data:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {utm_data}")
    
    await survey_handler.start_survey(message, state, utm_data)

@router.message(Command("restart"))
async def cmd_restart(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã"""
    await state.clear()
    await survey_handler.start_survey(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data.startswith("answer:"))
async def handle_button_states(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    await survey_handler.handle_button_answer(callback, state)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in Config.ADMIN_USER_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        stats = await sheets_manager.get_stats()
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤:

üìà –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: {stats['total_leads']}
üìÖ –õ–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_leads']}
        """
        await message.answer(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@router.message(Command("resend"))
async def cmd_resend(message: Message):
    """–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in Config.ADMIN_USER_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        result = sheets_manager.service.spreadsheets().values().get(
            spreadsheetId=Config.SPREADSHEET_ID,
            range=f"{Config.SHEET_NAME}!A:Z"
        ).execute()
        
        values = result.get('values', [])
        if len(values) <= 1:
            await message.answer("üìã –î–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç.")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        last_row = values[-1]
        headers = DataFormatter.get_sheet_headers()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        resend_text = "üîÑ –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–∏–¥–∞:\n\n"
        for i, header in enumerate(headers):
            if i < len(last_row):
                resend_text += f"‚Ä¢ {header}: {last_row[i]}\n"
        
        await message.bot.send_message(Config.PRIVATE_CHAT_ID, resend_text)
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

@router.message(Command("leads"))
async def cmd_leads(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏–¥—ã –≤ —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in Config.ADMIN_USER_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        if not sheets_manager.enabled:
            await message.answer("‚ùå Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω. –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
            
        result = sheets_manager.service.spreadsheets().values().get(
            spreadsheetId=Config.SPREADSHEET_ID,
            range=f"{Config.SHEET_NAME}!A:Z"
        ).execute()
        
        values = result.get('values', [])
        if len(values) <= 1:
            await message.answer("üìã –õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–∏–¥–æ–≤
        recent_leads = values[-5:] if len(values) > 5 else values[1:]
        headers = DataFormatter.get_sheet_headers()
        
        leads_text = f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_leads)} –ª–∏–¥–æ–≤:\n\n"
        
        for i, lead in enumerate(recent_leads, 1):
            leads_text += f"üî∏ –õ–∏–¥ #{len(values) - len(recent_leads) + i - 1}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if len(lead) > 0:
                leads_text += f"   ID: {lead[0]}\n"
            if len(lead) > 2:
                leads_text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lead[2]}\n"
            if len(lead) > 3:
                leads_text += f"   –í—Ä–µ–º—è: {lead[3]}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            survey_config = Config.load_survey()
            for j, step in enumerate(survey_config['steps']):
                if len(lead) > 5 + j:
                    answer = lead[5 + j] if lead[5 + j] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    leads_text += f"   {step['question']}: {answer}\n"
            
            leads_text += "\n"
        
        await message.answer(leads_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_unknown(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã.")
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")

