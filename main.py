#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —Å–±–æ—Ä–∞ –ª–∏–¥–æ–≤ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiogram 3.x
"""

import asyncio
import json
import base64
import urllib.parse
import uuid
import logging
import os
import sys
import secrets
import string
import aiosqlite
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode

from config import Config
from google_sheets_manager import GoogleSheetsManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.BOT_TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –º–µ–Ω–µ–¥–∂–µ—Ä–∞
sheets_manager = GoogleSheetsManager()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_tasks = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–µ–π"""
    db_path = "bot.db"
    async with aiosqlite.connect(db_path) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS events(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER, event TEXT, payload TEXT, ts TEXT
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS prereg(
            user_id INTEGER PRIMARY KEY,
            code TEXT, tariff TEXT, valid_to TEXT, created_at TEXT
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS settings(
            key TEXT PRIMARY KEY, value TEXT
        )""")
        await db.commit()

async def log_event(user_id: int, event: str, payload: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "bot.db"
    async with aiosqlite.connect(db_path) as db:
        await db.execute("INSERT INTO events(user_id,event,payload,ts) VALUES(?,?,?,?)",
                         (user_id, event, payload, datetime.utcnow().isoformat()))
        await db.commit()

def gen_code(n=6):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏"""
    alphabet = string.ascii_uppercase + string.digits
    return "LOCK-" + "".join(secrets.choice(alphabet) for _ in range(n))

async def create_prereg(user_id: int, tariff: str = "Pro 2 990 ‚ÇΩ"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    code = gen_code()
    valid_to = (datetime.now().replace(day=1) + timedelta(days=31*6))  # ~6 –º–µ—Å
    db_path = "bot.db"
    async with aiosqlite.connect(db_path) as db:
        # –≤—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º
        await db.execute("""
            INSERT INTO prereg(user_id, code, tariff, valid_to, created_at)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET code=excluded.code, tariff=excluded.tariff, valid_to=excluded.valid_to
        """, (user_id, code, tariff, valid_to.isoformat(), datetime.utcnow().isoformat()))
        await db.commit()
        # –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
        cur = await db.execute("SELECT COUNT(*) FROM prereg WHERE created_at <= (SELECT created_at FROM prereg WHERE user_id=?)", (user_id,))
        place = (await cur.fetchone())[0]
    return code, valid_to, place

def kb_fbs_demo():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è FBS –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 15 –º–∏–Ω", callback_data="demo:fbs:snooze15"),
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="demo:fbs:done")
    ],[
        InlineKeyboardButton(text="üìä –°–≤–æ–¥–∫–∞", callback_data="demo:summary")
    ]])

def kb_fbo_demo():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è FBO –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç", callback_data="demo:fbo:slot"),
        InlineKeyboardButton(text="üåÖ –ù–∞–ø–æ–º–Ω–∏—Ç—å —É—Ç—Ä–æ–º", callback_data="demo:fbo:morning")
    ],[
        InlineKeyboardButton(text="üìä –°–≤–æ–¥–∫–∞", callback_data="demo:summary")
    ]])

async def send_demo_notifications(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await msg.answer(
        "üîî –ó–∞–∫–∞–∑ #308132 ‚Äî –¥–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 1 —á 20 –º–∏–Ω\n"
        "FBS ¬∑ –ü–í–ó: –ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω–∞ 10 ¬∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤–∞–∂–Ω–æ\n\n"
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:\n‚Äî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–±–æ—Ä–∫—É –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É\n‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞/—Å–∞–º–æ–≤—ã–≤–æ–∑\n‚Äî –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ: –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–º–µ–Ω—ã",
        reply_markup=kb_fbs_demo()
    )
    await msg.answer(
        "‚è∞ –ü–æ—Å—Ç–∞–≤–∫–∞ FBO ‚Äî –¥–æ ¬´–∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã¬ª 24 —á\n"
        "–†–∏—Å–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è: min(5 ‚ÇΩ √ó –µ–¥., 25 000 ‚ÇΩ)\n\n"
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:\n‚Äî –£—Ç–æ—á–Ω–∏—Ç–µ —Å–ª–æ—Ç (–ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ, —á–µ–º –∑–∞ 72 —á)\n‚Äî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–ø–∞–∫–æ–≤–∫—É, –≥–∞–±–∞—Ä–∏—Ç—ã –∏ –ø–∞–ª–ª–µ—Ç—ã\n‚Äî –ù–∞–∑–Ω–∞—á—å—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ",
        reply_markup=kb_fbo_demo()
    )

async def send_demo_notifications_with_intro(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º"""
    await msg.answer(
        "üéØ <b>–î–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ¬´–ê–Ω—Ç–∏–ø—Ä–æ—Å—Ä–æ—á–∫–∞¬ª</b>\n\n"
        "–ù–∏–∂–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –¥–≤–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        "‚Ä¢ <b>FBS</b> ‚Äî –∑–∞–∫–∞–∑—ã —Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
        "‚Ä¢ <b>FBO</b> ‚Äî –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞\n\n"
        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!",
        parse_mode='HTML'
    )
    await send_demo_notifications(msg)

async def remind_later(chat_id: int, minutes: int):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç"""
    await asyncio.sleep(minutes * 60)
    await bot.send_message(chat_id, f"üîî –î–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ—à–ª–æ {minutes} –º–∏–Ω.")

async def send_checklist(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞"""
    await msg.answer(
        "üìã –ß–µ–∫-–ª–∏—Å—Ç ¬´–ê–Ω—Ç–∏–ø—Ä–æ—Å—Ä–æ—á–∫–∞¬ª\n\n"
        "FBS (—Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞):\n"
        "‚Ä¢ ‚àí4 —á / ‚àí2 —á / ‚àí60 –º–∏–Ω ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ\n"
        "‚Ä¢ –°–±–æ—Ä–∫–∞/–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞/—É–ø–∞–∫–æ–≤–∫–∞ ‚Äî –∫—Ä–∞—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π + ¬´—Ç–∏—Ö–∏–µ —á–∞—Å—ã¬ª\n\n"
        "FBO/FBW (–Ω–∞ —Å–∫–ª–∞–¥ –ú–ü):\n"
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª–æ ¬´72 —á–∞—Å–∞¬ª ‚Äî –∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏–π\n"
        "‚Ä¢ –§–æ—Ä–º—É–ª–∞ —Ä–∏—Å–∫–∞: min(5 ‚ÇΩ √ó –µ–¥., 25 000 ‚ÇΩ) ‚Äî —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏\n"
        "‚Ä¢ –ü–µ—Ä–µ–¥ –ø–æ—Å—Ç–∞–≤–∫–æ–π: —Å–ª–æ—Ç, –ø–∞–ª–ª–µ—Ç—ã, –≥–∞–±–∞—Ä–∏—Ç—ã, –¥–æ–∫–∏"
    )

async def show_pricing(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    pricing_text = """
üí∞ <b>–¢–∞—Ä–∏—Ñ—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ¬´–ê–Ω—Ç–∏–ø—Ä–æ—Å—Ä–æ—á–∫–∞¬ª</b>

üöÄ <b>Pro</b> ‚Äî 2 990 ‚ÇΩ/–º–µ—Å
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è FBS –∏ FBO
‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

‚ö° <b>Basic</b> ‚Äî 1 490 ‚ÇΩ/–º–µ—Å
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è FBS
‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã
‚Ä¢ Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üéØ <b>Enterprise</b> ‚Äî –æ—Ç 5 990 ‚ÇΩ/–º–µ—Å
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Pro
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 15 –º–∏–Ω—É—Ç</b>
–ë–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîí –ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å", callback_data="prereg:lock")],
        [InlineKeyboardButton(text="üéØ –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ", callback_data="demo:open")],
        [InlineKeyboardButton(text="üí≥ –ú–æ–π –∫–æ–¥ —Ü–µ–Ω—ã", callback_data="my_price")]
    ])
    
    await msg.answer(pricing_text, reply_markup=keyboard, parse_mode='HTML')

async def send_reminder(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã"""
    try:
        await bot.send_message(
            user_id,
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.",
            parse_mode='HTML'
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def schedule_reminder(user_id: int, delay_hours: int = 24):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
    delay_seconds = delay_hours * 3600
    
    async def reminder_task():
        await asyncio.sleep(delay_seconds)
        await send_reminder(user_id)
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if user_id in reminder_tasks:
            del reminder_tasks[user_id]
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_id in reminder_tasks:
        reminder_tasks[user_id].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(reminder_task())
    reminder_tasks[user_id] = task
    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ {delay_hours} —á–∞—Å–æ–≤")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∞–Ω–∫–µ—Ç—ã
class SurveyStates(StatesGroup):
    waiting_for_start = State()
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()
    question_6 = State()
    question_7 = State()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã - –ª–µ–≥–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
SURVEY_CONFIG = {
    "welcome": {
        "title": "**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –∑–∞ 1 –º–∏–Ω—É—Ç—É –∏ 8 –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.**",
        "buttons": [
            "–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
            "–ü–æ–∑–∂–µ"
        ]
    },
    "questions": [
        {
            "id": "platforms",
            "question": "–ì–¥–µ –≤—ã –ø—Ä–æ–¥–∞—ë—Ç–µ?",
            "type": "single",
            "options": [
                "Wildberries",
                "Ozon",
                "–ù–∞ –æ–±–µ–∏—Ö"
            ]
        },
        {
            "id": "work_type",
            "question": "–ö–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —á–∞—â–µ –≤—Å–µ–≥–æ?",
            "type": "single",
            "options": [
                "–°–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ (FBS)",
                "–ù–∞ —Å–∫–ª–∞–¥ –ú–ü (FBO/FBW)",
                "–ò —Ç–∞–∫, –∏ —Ç–∞–∫"
            ]
        },
        {
            "id": "volume_fbs",
            "question": "FBS –∑–∞–∫–∞–∑—ã –≤ –º–µ—Å—è—Ü (–ø—Ä–∏–º–µ—Ä–Ω–æ):",
            "type": "single",
            "options": [
                "0-50",
                "50-200",
                "200-500",
                "500+",
                "–ù–µ —Ä–∞–±–æ—Ç–∞—é FBS"
            ]
        },
        {
            "id": "volume_fbo",
            "question": "FBO/FBW –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–µ—Å—è—Ü (–ø—Ä–∏–º–µ—Ä–Ω–æ):",
            "type": "single",
            "options": [
                "0-2",
                "3-6",
                "7-15",
                "16+",
                "–ù–µ —Ä–∞–±–æ—Ç–∞—é FBO"
            ]
        },
        {
            "id": "main_concern",
            "question": "–ß—Ç–æ —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏–ª–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π?",
            "type": "single",
            "options": [
                "–ù–µ —É—Å–ø–µ–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ FBS –∑–∞ 24/120 —á–∞—Å–æ–≤",
                "–ü–µ—Ä–µ–Ω–æ—Å/–æ—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ < 3 –¥–Ω–µ–π (FBO/FBW, —à—Ç—Ä–∞—Ñ)",
                "–ù–µ–¥–æ–≤–æ–∑/–ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –ø—Ä–∏—ë–º–∫–µ",
                "–ù–µ–≤–µ—Ä–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã/–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ (—à—Ç—Ä–∞—Ñ—ã)",
                "–î—Ä—É–≥–æ–µ"
            ]
        },
        {
            "id": "frequency",
            "question": "–ö–∞–∫ —á–∞—Å—Ç–æ —ç—Ç–æ —Å–ª—É—á–∞–ª–æ—Å—å –∑–∞ 30 –¥–Ω–µ–π?",
            "type": "single",
            "options": [
                "–ù–∏ —Ä–∞–∑—É",
                "1-3 —Ä–∞–∑–∞",
                "4-10 —Ä–∞–∑",
                "–ë–æ–ª—å—à–µ 10 —Ä–∞–∑"
            ]
        },
        {
            "id": "losses",
            "question": "–ü—Ä–∏–º–µ—Ä–Ω–æ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø–æ—Ç–µ—Ä—è–ª–∏ –Ω–∞ —ç—Ç–æ–º –∑–∞ 30 –¥–Ω–µ–π?",
            "type": "single",
            "options": [
                "0 ‚ÇΩ",
                "–¥–æ 5 000 ‚ÇΩ",
                "5-25 —Ç—ã—Å ‚ÇΩ",
                "25-100 —Ç—ã—Å ‚ÇΩ",
                "100 —Ç—ã—Å+ ‚ÇΩ"
            ]
        },
        {
            "id": "reasons",
            "question": "–ü–æ—á–µ–º—É —ç—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ?",
            "type": "multi",
            "options": [
                "–ù–µ —É—Å–ø–µ–≤–∞–µ–º —Å–æ–±—Ä–∞—Ç—å/—É–ø–∞–∫–æ–≤–∞—Ç—å",
                "–°–ª–æ—Ç/–ª–æ–≥–∏—Å—Ç–∏–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å (–ø–æ—Å—Ç–∞–≤–∫–∞)",
                "–ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ / –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä (—Å–º–µ–Ω–∞/–æ—à–∏–±–∫–∞)",
                "–î—Ä—É–≥–æ–µ"
            ]
        },
        {
            "id": "urgency",
            "question": "–•–æ—Ç–µ–ª–∏ –±—ã –í—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —à—Ç—Ä–∞—Ñ—ã?",
            "type": "single",
            "options": [
                "–î–∞, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ",
                "–î–∞, –Ω–æ –º–æ–≥—É –∏ –±–µ–∑ –Ω–µ–≥–æ",
                "–ù–µ—Ç, —è —Å–∞–º —Å–ø—Ä–∞–≤–ª—é—Å—å"
            ]
        },
        {
            "id": "price",
            "question": "–ö–∞–∫–æ–π —Ü–µ–Ω–Ω–∏–∫ –í–∞–º –±—ã–ª –±—ã –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω –∑–∞ —Ç–∞–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
            "type": "single",
            "options": [
                "–¥–æ 990 ‚ÇΩ",
                "1-3 —Ç—ã—Å ‚ÇΩ",
                "3-5 —Ç—ã—Å ‚ÇΩ",
                "5 —Ç—ã—Å+ ‚ÇΩ",
                "–•–æ—á—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ/—Å–∞–º"
            ]
        }
    ],
    "final": {
        "title": "–°–ø–∞—Å–∏–±–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ–∫-–ª–∏—Å—Ç ¬´–ê–Ω—Ç–∏–ø—Ä–æ—Å—Ä–æ—á–∫–∞¬ª (2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã) –∏ –∑–∞–∫—Ä–µ–ø–ª—è—é –∑–∞ –≤–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤.",
        "description": "–ö–∞–∫ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ?",
        "buttons": [
            "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∫—Ç–æ –∏—Å–ø—Ä–æ–±—É–µ—Ç",
            "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "–ì–æ—Ç–æ–≤–æ"
        ]
    }
}

class UTMParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ start payload"""
    
    @staticmethod
    def parse_start_payload(payload: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ start payload"""
        utm_data = {}
        
        if not payload:
            return utm_data
            
        try:
            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ base64 JSON
            try:
                decoded = base64.b64decode(payload).decode('utf-8')
                data = json.loads(decoded)
                if isinstance(data, dict):
                    utm_data = {k: v for k, v in data.items() if k.startswith('utm_')}
            except (base64.binascii.Error, json.JSONDecodeError, UnicodeDecodeError):
                pass
            
            # –ï—Å–ª–∏ base64 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º URL-encoded
            if not utm_data:
                parsed = urllib.parse.parse_qs(payload)
                utm_data = {k: v[0] for k, v in parsed.items() if k.startswith('utm_')}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ start payload: {e}")
            
        return utm_data

class SurveyHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã"""
    
    def __init__(self):
        self.config = SURVEY_CONFIG
    
    def create_keyboard(self, question: Dict[str, Any], user_answers: Dict[str, Any] = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        keyboard = []
        
        for i, option in enumerate(question['options']):
            # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±–æ—Ä–∞
            if question['type'] == 'multi':
                is_selected = user_answers and option in user_answers.get(question['id'], [])
                text = f"{'‚úÖ' if is_selected else '‚¨ú'} {option}"
            else:
                text = option
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–∏–º–≤–æ–ª–∞–º–∏
            callback_data = f"answer:{question['id']}:{i}"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        if question['type'] == 'multi':
            keyboard.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next:{question['id']}")])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def start_survey(self, message: Message, state: FSMContext, utm_data: Dict[str, str] = None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∞–Ω–∫–µ—Ç—É"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            lead_id=str(uuid.uuid4()),
            user_id=message.from_user.id,
            username=message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
            tg_start=datetime.now().isoformat(),
            utm_data=utm_data or {},
            answers={}
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"{self.config['welcome']['title']}"
        keyboard = [[InlineKeyboardButton(text=btn, callback_data=f"welcome:{i}")] for i, btn in enumerate(self.config['welcome']['buttons'])]
        await message.answer(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode='Markdown'
        )
    
    async def show_question(self, message: Message, state: FSMContext, question_index: int = 0):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã"""
        if question_index >= len(self.config['questions']):
            # –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await self.complete_survey(message, state)
            return
        
        question = self.config['questions'][question_index]
        data = await state.get_data()
        user_answers = data.get('answers', {})
        
        keyboard = self.create_keyboard(question, user_answers)
        await message.answer(question['question'], reply_markup=keyboard)
    
    async def handle_answer(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        _, question_id, option_index = callback.data.split(':', 2)
        option_index = int(option_index)
        
        data = await state.get_data()
        answers = data.get('answers', {})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        question = next((q for q in self.config['questions'] if q['id'] == question_id), None)
        if not question:
            await callback.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        if 0 <= option_index < len(question['options']):
            answer_text = question['options'][option_index]
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞")
            return
        
        if question['type'] == 'multi':
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            if question_id not in answers:
                answers[question_id] = []
            
            if answer_text in answers[question_id]:
                answers[question_id].remove(answer_text)
            else:
                answers[question_id].append(answer_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.create_keyboard(question, answers)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            
        else:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
            answers[question_id] = answer_text
            data['answers'] = answers
            await state.set_data(data)
            
            await callback.answer()
            await self.show_next_question(callback.message, state, question_id)
    
    async def handle_next(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ' –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        _, question_id = callback.data.split(':', 1)
        
        data = await state.get_data()
        answers = data.get('answers', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
        if question_id not in answers or not answers[question_id]:
            await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç")
            return
        
        await callback.answer()
        await self.show_next_question(callback.message, state, question_id)
    
    async def show_next_question(self, message: Message, state: FSMContext, current_question_id: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        current_index = next((i for i, q in enumerate(self.config['questions']) if q['id'] == current_question_id), -1)
        next_index = current_index + 1
        
        if next_index < len(self.config['questions']):
            await self.show_question(message, state, next_index)
        else:
            # –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await self.complete_survey(message, state)
    
    async def complete_survey(self, message: Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        data = await state.get_data()
        data['tg_complete'] = datetime.now().isoformat()
        
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data['user_id']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        success = await sheets_manager.save_lead(data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
        await self.send_notification(data, success)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await send_demo_notifications_with_intro(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫-–ª–∏—Å—Ç
        await send_checklist(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        final_text = f"**{self.config['final']['title']}**\n\n{self.config['final']['description']}"
        keyboard = [[InlineKeyboardButton(text=btn, callback_data=f"final:{i}")] for i, btn in enumerate(self.config['final']['buttons'])]
        await message.answer(
            final_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    
    async def send_notification(self, data: Dict[str, Any], sheets_success: bool):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PRIVATE_CHANNEL_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if not Config.PRIVATE_CHANNEL_ID:
                logger.warning("PRIVATE_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            try:
                complete_time = datetime.fromisoformat(data['tg_complete']).strftime('%d.%m.%Y %H:%M:%S')
            except:
                complete_time = data['tg_complete']
                
            notification_text = f"""
üéâ <b>–ù–æ–≤—ã–π –ª–∏–¥ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É!</b>

üìã <b>Lead ID:</b> <code>{data['lead_id']}</code>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{data['username']} (ID: {data['user_id']})
üìÖ <b>–í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {complete_time}
üíæ <b>Google Sheets:</b> {'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if sheets_success else '‚ùå –û—à–∏–±–∫–∞'}

üìä <b>–û—Ç–≤–µ—Ç—ã:</b>
"""
            
            for question in self.config['questions']:
                question_id = question['id']
                answer = data['answers'].get(question_id, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                
                if isinstance(answer, list):
                    answer = ', '.join(answer) if answer else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                
                notification_text += f"‚Ä¢ <b>{question['question']}</b>: {answer}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            utm_data = data.get('utm_data', {})
            if utm_data:
                notification_text += "\nüè∑ <b>UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
                for key, value in utm_data.items():
                    notification_text += f"‚Ä¢ <b>{key}:</b> {value}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ Google Sheets
            if sheets_success:
                notification_text += "\n‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets!</b>"
            else:
                notification_text += "\n‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google Sheets!</b>"
            
            await bot.send_message(Config.PRIVATE_CHANNEL_ID, notification_text, parse_mode='HTML')
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {Config.PRIVATE_CHANNEL_ID}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–Ω–∫–µ—Ç—ã
survey_handler = SurveyHandler()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    # –ü–∞—Ä—Å–∏–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ start payload
    utm_data = UTMParser.parse_start_payload(message.text.split()[1] if len(message.text.split()) > 1 else None)
    
    if utm_data:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {utm_data}")
    
    await survey_handler.start_survey(message, state, utm_data)

@dp.message(Command("restart"))
async def cmd_restart(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã"""
    await state.clear()
    await survey_handler.start_survey(message, state)

@dp.message(Command("my_price"))
async def my_price(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ —Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db_path = "bot.db"
        async with aiosqlite.connect(db_path) as db:
            cur = await db.execute("SELECT code, tariff, valid_to FROM prereg WHERE user_id=?", (msg.from_user.id,))
            row = await cur.fetchone()
        
        if not row:
            await msg.answer("‚ùå –ü—Ä–µ–¥–∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /prereg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏")
            return
        
        code, tariff, valid_to = row
        d = datetime.fromisoformat(valid_to)
        await msg.answer(
            f"üí≥ <b>–í–∞—à –∫–æ–¥ —Ü–µ–Ω—ã</b>\n\n"
            f"–ö–æ–¥: <code>{code}</code>\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {d.strftime('%d.%m.%Y')}",
            parse_mode='HTML'
        )
    except Exception as e:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Ü–µ–Ω—ã")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Ü–µ–Ω—ã: {e}")

@dp.message(Command("demo"))
async def cmd_demo(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await send_demo_notifications_with_intro(msg)

@dp.message(Command("pricing"))
async def cmd_pricing(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    await show_pricing(msg)

@dp.message(Command("demo_notifications"))
async def cmd_demo_notifications(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)"""
    await send_demo_notifications_with_intro(msg)

@dp.message(Command("checklist"))
async def cmd_checklist(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç"""
    await send_checklist(msg)

@dp.message(Command("summary"))
async def cmd_summary(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É"""
    await msg.answer("üìà –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n‚Ä¢ –°–ø–∞—Å–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: 7\n‚Ä¢ –ò–∑–±–µ–≥–Ω—É—Ç–æ —É–¥–µ—Ä–∂–∞–Ω–∏–π: 1\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 25 000 ‚ÇΩ")

@dp.message(Command("prereg"))
async def cmd_prereg(msg: Message):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å"""
    try:
        code, valid_to, place = await create_prereg(msg.from_user.id)
        await log_event(msg.from_user.id, "prereg_lock", code)
        await msg.answer(
            f"‚úÖ –ü—Ä–µ–¥–∑–∞–ø–∏—Å—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞!\n"
            f"–ö–æ–¥ —Ü–µ–Ω—ã: <b>{code}</b>\n"
            f"–¢–∞—Ä–∏—Ñ: Pro 2 990 ‚ÇΩ\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_to.strftime('%d.%m.%Y')}\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ‚Ññ{place}",
            parse_mode='HTML'
        )
    except Exception as e:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏: {e}")

@dp.message(Command("help"))
async def cmd_help(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üìù <b>–ê–Ω–∫–µ—Ç–∞:</b>
/start ‚Äî –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
/restart ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É

üéØ <b>–î–µ–º–æ –∏ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
/demo ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/demo_notifications ‚Äî –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–º–æ
/checklist ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç ¬´–ê–Ω—Ç–∏–ø—Ä–æ—Å—Ä–æ—á–∫–∞¬ª
/summary ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É

üí∞ <b>–¢–∞—Ä–∏—Ñ—ã –∏ –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å:</b>
/pricing ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã
/prereg ‚Äî –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å
/my_price ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∫–æ–¥ —Ü–µ–Ω—ã

‚ùì <b>–°–ø—Ä–∞–≤–∫–∞:</b>
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
"""
    await msg.answer(help_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data.startswith("welcome:"))
async def handle_welcome_buttons(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
    _, button_index = callback.data.split(':', 1)
    button_index = int(button_index)
    
    if button_index == 0:  # "–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É"
        await callback.answer()
        await survey_handler.show_question(callback.message, state, 0)
    else:  # "–ü–æ–∑–∂–µ"
        await callback.answer("–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! üëã")
        await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! üëã")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        user_id = callback.from_user.id
        await schedule_reminder(user_id, 24)

@dp.callback_query(F.data.startswith("answer:"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    await survey_handler.handle_answer(callback, state)

@dp.callback_query(F.data.startswith("next:"))
async def handle_next(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ'"""
    await survey_handler.handle_next(callback, state)

@dp.callback_query(F.data.startswith("final:"))
async def handle_final_buttons(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    _, button_index = callback.data.split(':', 1)
    button_index = int(button_index)
    
    if button_index == 0:  # "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∫—Ç–æ –∏—Å–ø—Ä–æ–±—É–µ—Ç"
        code, valid_to, place = await create_prereg(callback.from_user.id)
        await log_event(callback.from_user.id, "prereg_lock", code)
        await callback.message.answer(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ.\n"
            f"–ö–æ–¥ —Ü–µ–Ω—ã: <b>{code}</b>\n"
            f"–¶–µ–Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ (–¥–æ {valid_to.strftime('%d.%m.%Y')}).\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ‚Ññ{place}.\n\n"
            f"–î–∞–ª–µ–µ: 15-–º–∏–Ω—É—Ç–Ω—ã–π –ø–∏–ª–æ—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π ‚Äî –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ?"
        )
        await callback.answer("–ü—Ä–µ–¥–∑–∞–ø–∏—Å—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞.")
    elif button_index == 1:  # "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        await callback.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        await send_demo_notifications_with_intro(callback.message)
    else:  # "–ì–æ—Ç–æ–≤–æ"
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        await callback.message.edit_text("üëã –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!")

@dp.callback_query(F.data.startswith("demo:"))
async def handle_demo_buttons(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–º–æ-–∫–Ω–æ–ø–æ–∫"""
    await log_event(callback.from_user.id, "demo_click", callback.data)
    
    if callback.data == "demo:fbs:snooze15":
        await callback.answer("‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç")
        await callback.message.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 15 –º–∏–Ω—É—Ç")
    elif callback.data == "demo:fbs:done":
        await callback.answer("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        await callback.message.answer("üéâ –ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
    elif callback.data == "demo:fbo:slot":
        await callback.answer("üìÖ –û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–ª–æ—Ç–æ–≤")
        await callback.message.answer("üìã –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å–ª–æ—Ç–∞:\n‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 72 —á–∞—Å–æ–≤\n‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ—Ç")
    elif callback.data == "demo:fbo:morning":
        await callback.answer("üåÖ –ù–∞–ø–æ–º–Ω—é —É—Ç—Ä–æ–º")
        await callback.message.answer("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —É—Ç—Ä–æ (9:00)")
    elif callback.data == "demo:summary":
        await callback.answer("üìä –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–≤–æ–¥–∫—É")
        await callback.message.answer("üìà –°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n‚Ä¢ –°–ø–∞—Å–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: 7\n‚Ä¢ –ò–∑–±–µ–≥–Ω—É—Ç–æ —É–¥–µ—Ä–∂–∞–Ω–∏–π: 1\n‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: 25 000 ‚ÇΩ")
    elif callback.data == "demo:open":
        await callback.answer("üéØ –ü–æ–∫–∞–∑—ã–≤–∞—é –¥–µ–º–æ")
        await send_demo_notifications_with_intro(callback.message)

@dp.callback_query(F.data.startswith("nav:"))
async def handle_nav_buttons(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await log_event(callback.from_user.id, "nav_click", callback.data)
    
    if callback.data == "nav:pricing":
        await callback.answer("üí∞ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–∞—Ä–∏—Ñ—ã")
        await show_pricing(callback.message)

@dp.callback_query(F.data.startswith("prereg:"))
async def handle_prereg_buttons(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏"""
    await log_event(callback.from_user.id, "prereg_click", callback.data)
    
    if callback.data == "prereg:lock":
        await callback.answer("üîí –°–æ–∑–¥–∞—é –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å...")
        try:
            code, valid_to, place = await create_prereg(callback.from_user.id)
            await callback.message.answer(
                f"‚úÖ –ü—Ä–µ–¥–∑–∞–ø–∏—Å—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞!\n"
                f"–ö–æ–¥ —Ü–µ–Ω—ã: <b>{code}</b>\n"
                f"–¢–∞—Ä–∏—Ñ: Pro 2 990 ‚ÇΩ\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_to.strftime('%d.%m.%Y')}\n"
                f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: ‚Ññ{place}",
                parse_mode='HTML'
            )
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏: {e}")

@dp.callback_query(F.data == "my_price")
async def handle_my_price_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –∫–æ–¥ —Ü–µ–Ω—ã'"""
    await log_event(callback.from_user.id, "my_price_click", "button")
    
    try:
        db_path = "bot.db"
        async with aiosqlite.connect(db_path) as db:
            cur = await db.execute("SELECT code, tariff, valid_to FROM prereg WHERE user_id=?", (callback.from_user.id,))
            row = await cur.fetchone()
        
        if not row:
            await callback.answer("‚ùå –ü—Ä–µ–¥–∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.answer("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å¬ª")
            return
        
        code, tariff, valid_to = row
        d = datetime.fromisoformat(valid_to)
        
        await callback.answer("üí≥ –ü–æ–∫–∞–∑—ã–≤–∞—é –∫–æ–¥ —Ü–µ–Ω—ã")
        await callback.message.answer(
            f"üí≥ <b>–í–∞—à –∫–æ–¥ —Ü–µ–Ω—ã</b>\n\n"
            f"–ö–æ–¥: <code>{code}</code>\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {d.strftime('%d.%m.%Y')}",
            parse_mode='HTML'
        )
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Ü–µ–Ω—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unknown(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())





