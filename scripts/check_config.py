#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import os
import json
from config import Config

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...")
    
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return False
    
    print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    return True

def check_service_account():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Service Account...")
    
    if not os.path.exists(Config.GOOGLE_SHEETS_CREDENTIALS_FILE):
        print(f"‚ùå –§–∞–π–ª {Config.GOOGLE_SHEETS_CREDENTIALS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–∫–∞—á–∞–π—Ç–µ –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ Google Cloud Console")
        return False
    
    try:
        with open(Config.GOOGLE_SHEETS_CREDENTIALS_FILE, 'r') as f:
            data = json.load(f)
        
        if 'type' not in data or data['type'] != 'service_account':
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!")
            return False
        
        print("‚úÖ –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
        
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False

def check_survey_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–Ω–∫–µ—Ç—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã...")
    
    try:
        survey_config = Config.load_survey()
        
        if 'steps' not in survey_config:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'steps' –≤ survey.json!")
            return False
        
        steps = survey_config['steps']
        if not steps:
            print("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–≥–æ–≤!")
            return False
        
        print(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(steps)} —à–∞–≥–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
        for i, step in enumerate(steps):
            if 'id' not in step:
                print(f"‚ùå –®–∞–≥ {i+1} –Ω–µ –∏–º–µ–µ—Ç ID!")
                return False
            if 'question' not in step:
                print(f"‚ùå –®–∞–≥ {i+1} –Ω–µ –∏–º–µ–µ—Ç –≤–æ–ø—Ä–æ—Å–∞!")
                return False
            if 'type' not in step:
                print(f"‚ùå –®–∞–≥ {i+1} –Ω–µ –∏–º–µ–µ—Ç —Ç–∏–ø–∞!")
                return False
            
            if step['type'] == 'buttons' and 'options' not in step:
                print(f"‚ùå –®–∞–≥ {i+1} —Ç–∏–ø–∞ 'buttons' –Ω–µ –∏–º–µ–µ—Ç –æ–ø—Ü–∏–π!")
                return False
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        return False

def check_config_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        Config.validate()
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return True
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_modules = [
        'aiogram',
        'google.auth',
        'googleapiclient',
        'dotenv'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞\n")
    
    checks = [
        check_env_file,
        check_service_account,
        check_survey_config,
        check_config_variables,
        check_dependencies
    ]
    
    all_passed = True
    
    for check in checks:
        if not check():
            all_passed = False
        print()
    
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    
    return all_passed

if __name__ == "__main__":
    main()





