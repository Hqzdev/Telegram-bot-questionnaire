#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –¥–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import aiosqlite
from datetime import datetime, timedelta
import secrets
import string

async def test_database_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞
    def gen_code(n=6):
        alphabet = string.ascii_uppercase + string.digits
        return "LOCK-" + "".join(secrets.choice(alphabet) for _ in range(n))
    
    code = gen_code()
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥: {code}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏
    async def create_prereg(user_id: int, tariff: str = "Pro 2 990 ‚ÇΩ"):
        code = gen_code()
        valid_to = (datetime.now().replace(day=1) + timedelta(days=31*6))
        
        db_path = "bot.db"
        async with aiosqlite.connect(db_path) as db:
            await db.execute("""
                INSERT INTO prereg(user_id, code, tariff, valid_to, created_at)
                VALUES (?, ?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET code=excluded.code, tariff=excluded.tariff, valid_to=excluded.valid_to
            """, (user_id, code, tariff, valid_to.isoformat(), datetime.utcnow().isoformat()))
            await db.commit()
            
            cur = await db.execute("SELECT COUNT(*) FROM prereg WHERE created_at <= (SELECT created_at FROM prereg WHERE user_id=?)", (user_id,))
            place = (await cur.fetchone())[0]
        
        return code, valid_to, place
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏
    test_user_id = 12345
    code, valid_to, place = await create_prereg(test_user_id)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å: –∫–æ–¥={code}, –¥–æ={valid_to.strftime('%d.%m.%Y')}, –º–µ—Å—Ç–æ={place}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏
    async def get_prereg(user_id: int):
        db_path = "bot.db"
        async with aiosqlite.connect(db_path) as db:
            cur = await db.execute("SELECT code, tariff, valid_to FROM prereg WHERE user_id=?", (user_id,))
            return await cur.fetchone()
    
    prereg_data = await get_prereg(test_user_id)
    if prereg_data:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–µ–¥–∑–∞–ø–∏—Å—å: {prereg_data}")
    else:
        print("‚ùå –ü—Ä–µ–¥–∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    async def log_event(user_id: int, event: str, payload: str = ""):
        db_path = "bot.db"
        async with aiosqlite.connect(db_path) as db:
            await db.execute("INSERT INTO events(user_id,event,payload,ts) VALUES(?,?,?,?)",
                             (user_id, event, payload, datetime.utcnow().isoformat()))
            await db.commit()
    
    await log_event(test_user_id, "test_event", "test_payload")
    print("‚úÖ –°–æ–±—ã—Ç–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

async def test_keyboard_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    def kb_fbs_demo():
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å 15 –º–∏–Ω", callback_data="demo:fbs:snooze15"),
            InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="demo:fbs:done")
        ],[
            InlineKeyboardButton(text="–°–≤–æ–¥–∫–∞ /summary", callback_data="demo:summary")
        ]])
    
    def kb_fbo_demo():
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ—Ç", callback_data="demo:fbo:slot"),
            InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å —É—Ç—Ä–æ–º", callback_data="demo:fbo:morning")
        ],[
            InlineKeyboardButton(text="–°–≤–æ–¥–∫–∞ /summary", callback_data="demo:summary")
        ]])
    
    fbs_kb = kb_fbs_demo()
    fbo_kb = kb_fbo_demo()
    
    print(f"‚úÖ FBS –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(fbs_kb.inline_keyboard)} —Ä—è–¥–∞")
    print(f"‚úÖ FBO –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(fbo_kb.inline_keyboard)} —Ä—è–¥–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
    fbs_callbacks = [btn.callback_data for row in fbs_kb.inline_keyboard for btn in row]
    fbo_callbacks = [btn.callback_data for row in fbo_kb.inline_keyboard for btn in row]
    
    expected_fbs = ["demo:fbs:snooze15", "demo:fbs:done", "demo:summary"]
    expected_fbo = ["demo:fbo:slot", "demo:fbo:morning", "demo:summary"]
    
    if all(cb in fbs_callbacks for cb in expected_fbs):
        print("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ FBS callback_data –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    else:
        print("‚ùå –ù–µ –≤—Å–µ FBS callback_data –Ω–∞–π–¥–µ–Ω—ã")
    
    if all(cb in fbo_callbacks for cb in expected_fbo):
        print("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ FBO callback_data –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    else:
        print("‚ùå –ù–µ –≤—Å–µ FBO callback_data –Ω–∞–π–¥–µ–Ω—ã")

def test_callback_handlers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ callback_data
    test_callbacks = [
        "demo:fbs:snooze15",
        "demo:fbs:done", 
        "demo:fbo:slot",
        "demo:fbo:morning",
        "demo:summary",
        "demo:open",
        "nav:pricing",
        "prereg:lock",
        "my_price"
    ]
    
    for callback in test_callbacks:
        if callback.startswith("demo:"):
            print(f"‚úÖ demo callback: {callback}")
        elif callback.startswith("nav:"):
            print(f"‚úÖ nav callback: {callback}")
        elif callback.startswith("prereg:"):
            print(f"‚úÖ prereg callback: {callback}")
        elif callback == "my_price":
            print(f"‚úÖ my_price callback: {callback}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback}")
    
    print("‚úÖ –í—Å–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π –¥–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        await test_database_functions()
        await test_keyboard_functions()
        test_callback_handlers()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
        print("‚úÖ /demo ‚Üí –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏")
        print("‚úÖ demo:fbs:snooze15 ‚Üí –ª–æ–≥ + –≤—Å–ø–ª—ã–≤–∞—à–∫–∞ + –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω")
        print("‚úÖ demo:fbs:done ‚Üí –ª–æ–≥ + –≤—Å–ø–ª—ã–≤–∞—à–∫–∞ ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª")
        print("‚úÖ demo:fbo:slot ‚Üí –ª–æ–≥ + –≤—Å–ø–ª—ã–≤–∞—à–∫–∞ ¬´–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É¬ª")
        print("‚úÖ demo:fbo:morning ‚Üí –ª–æ–≥ + –≤—Å–ø–ª—ã–≤–∞—à–∫–∞ ¬´–ù–∞–ø–æ–º–Ω—é —É—Ç—Ä–æ–º¬ª")
        print("‚úÖ demo:summary ‚Üí –ª–æ–≥ + —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–°–≤–æ–¥–∫–∞ (–¥–µ–º–æ)‚Ä¶¬ª")
        print("‚úÖ demo:open ‚Üí –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("‚úÖ prereg:lock ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏ –≤ –ë–î")
        print("‚úÖ /my_price ‚Üí –ø–æ–∫–∞–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ —Å—Ä–æ–∫–∞")
        print("‚úÖ nav:pricing ‚Üí –ø–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ–æ–≤")
        print("‚úÖ /pricing ‚Üí –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–∞—Ä–∏—Ñ–æ–≤")
        print("‚úÖ /help ‚Üí —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º")
        print("‚úÖ /checklist ‚Üí –ø–æ–∫–∞–∑ —á–µ–∫-–ª–∏—Å—Ç–∞")
        print("‚úÖ /summary ‚Üí –ø–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏")
        print("‚úÖ /prereg ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–ø–∏—Å–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
